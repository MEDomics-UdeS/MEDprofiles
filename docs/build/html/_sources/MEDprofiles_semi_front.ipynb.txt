{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# MEDProfiles Visualization\n",
    "\n",
    "## Here is a list of what you can do with the interactive figure:\n",
    "\n",
    "- Display/Hide point values by clicking near the corresponding point.\n",
    "- Set the time relative to a specific class by pressing \"r\" on your keyboard while hovering over the desired class. The same action can be used to retrieve the absolute time.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle\n",
    "import random\n",
    "\n",
    "from src.semi_front.MEDprofiles_utils import *\n",
    "import matplotlib as mpl\n",
    "import numpy as np\n",
    "\n",
    "%matplotlib qt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get MEDProfiles\n",
    "data_file = open('../data/mimic/MEDprofileData', 'rb')\n",
    "# data_file = open('../data/meningioma/MEDprofileData', 'rb')\n",
    "MEDprofile_list = pickle.load(data_file)\n",
    "data_file.close()\n",
    "cohort = MEDcohort(list_MEDprofile=MEDprofile_list)\n",
    "df = cohort.profile_list_to_df()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "display(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "patient_id = random.choice(df.index)\n",
    "df_profile = df.loc[[patient_id]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "display(df_profile)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Matplotlib\n",
    "\n",
    "https://matplotlib.org\n",
    "https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.subplots.html"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "### Define plot functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define global attributes\n",
    "dict_points = {}\n",
    "dict_annotations = {}\n",
    "xaxis = [FIXED_COLUMNS[1]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def button_pressed(event):\n",
    "    \"\"\"\n",
    "    Show or hide annotations if the event occurs.\n",
    "    :param event:\n",
    "    :return:\n",
    "    \"\"\"\n",
    "    if event.button == mpl.backend_bases.MouseButton.LEFT or event.button == mpl.backend_bases.MouseButton.RIGHT:\n",
    "        display_annotations(event)\n",
    "    plt.gcf().canvas.draw_idle()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def key_pressed(event):\n",
    "    \"\"\"\n",
    "    Called when a key pressed event occurs.\n",
    "    :param event:\n",
    "    :return:\n",
    "    \"\"\"\n",
    "    # Set relative time at the class matching the axis in which the event occurs\n",
    "    if event.key == 'r':\n",
    "        r_pressed_in_profile(event, axes, df_profile, classes_attributes_dict, xaxis, dict_points, dict_annotations)\n",
    "    center_data_in_profile_plot(dict_points)\n",
    "    fig.canvas.draw()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "### Customized version"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define figure parameters\n",
    "subplot_height = 1\n",
    "plot_width = 10\n",
    "classes_attributes_dict = {'demographic': ([], 'compact'), 'labevent': (['sodium_max', 'sodium_min', 'sodium_trend'], 'complete'), 'nrad': (['attr_0', 'attr_1', 'attr_2'], 'compact'), 'vp': ([], 'compact')}\n",
    "# classes_attributes_dict = {'Demographic': ([], 'compact'), 'Therapy': ([], 'compact'), 'Pathology': ([], 'complete'), 'Event': ([], 'complete')}\n",
    "colors = mpl.colormaps['Blues'](np.linspace(0, 1, len(classes_attributes_dict.keys()) + 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "# Create and display figure\n",
    "fig, axes = set_plot(subplot_height, plot_width, classes_attributes_dict, colors)\n",
    "fig.canvas.mpl_connect('button_press_event', button_pressed)\n",
    "fig.canvas.mpl_connect('key_press_event', key_pressed)\n",
    "points, annotations = display_profile(axes, df_profile, classes_attributes_dict)\n",
    "dict_points[patient_id] = points\n",
    "dict_annotations[patient_id] = annotations\n",
    "fig.suptitle(f'MEDprofile of patient {patient_id}', fontsize=16)\n",
    "plt.xlabel('Date', fontsize=12)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}